import { Entity, type EntityProps } from './entity';
import { Event, type EventCode, type EventPayload } from './event';

/**
 * Aggregate root is a special kind of entity that is used to encapsulate the domain logic of a
 * group of entities. The aggregate root is the entry point to the aggregate and is the only
 * entity that can be referenced from outside the aggregate.
 *
 * The aggregate root is responsible to manage the domain logic of the aggregate and to ensure
 * that the invariants of the aggregate are preserved. The aggregate root is also responsible to
 * manage the domain events that are generated by the aggregate.
 */
export class AggregateRoot<P extends EntityProps, E extends EventCode> extends Entity<P> {
  // List of events that are generated by the aggregate root.
  private _events: Event<P, E>[] = [];

  /**
   * Returns the list of events that are generated by the aggregate root.
   */
  public get events() {
    return this._events;
  }

  /**
   * Add a new event to the aggregate root. The event is registered in the aggregate root and
   * can be pulled later to be published or stored.
   *
   * @param code - Code of the event to add.
   * @param select - Optional list of properties to select from the aggregate root to be part of
   * the event.
   */
  protected addEvent(code: E, select?: (keyof EventPayload<P>)[]) {
    // Filtering the properties to include in the event payload.
    const selectedProps = (
      select
        ? select.reduce((acc, key) => {
            if (key in this.primitives) {
              acc[key] = this.primitives[key];
            }
            return acc;
          }, {} as EventPayload<P>)
        : this.primitives
    ) as EventPayload<P>;

    this._events.push(new Event<P, E>(code, selectedProps));
  }

  /**
   * Pulls the registered aggregate domain events and clean the list. Commonly used to publish
   * the events to the event bus or to store them in a event store.
   */
  public pullEvents(): Event<P, E>[] {
    const events = this._events.slice();
    this._events = [];
    return events;
  }
}
